"SPPARKS WWW Site"_sws - "SPPARKS Documentation"_sd - "SPPARKS Commands"_sc :c

:link(sws,http://spparks.sandia.gov)
:link(sd,Manual.html)
:link(sc,Section_commands.html#comm)

:line

dump command :h3
"dump image"_dump_image.html command :h3

[Syntax:]

dump dump-ID style delta filename field1 field2 ... :pre

dump-ID = user-assigned name for the dump :ulb,l
style = {text} or {image} :l
delta = time increment between dumps (seconds) :l
filename = name of file to dump snapshots to :l
fields = list of arguments for a particular style :l
  {image} fields = discussed on "dump image"_dump_image.html doc page
  {text} fields = {id} or {site} or {x} or {y} or {z} or
                  {energy} or {propensity} or {iN} or {dN} :pre
:ule

[Examples:]

dump 1 text 0.25 tmp.dump
dump 1 text 1.0 my.dump id site x y z
dump mydump text 5.0 snap.ising id site energy i1 :pre

[Description:]

The {text} style dumps a snapshot of site values to one or more files
at time intervals of {delta} during a simulation.  The {image} style
creates a JPG or PPM image file of the site configuration every at
time intervals of {delta}, as discussed on the "dump
image"_dump_image.html doc page.  The remainder of this page
refers to the {text} style.

As described below, the filename determines the kind of output (text
or binary or gzipped, one big file or one per timestep, one big file
or one per processor).  The quantities printed are obtained from the
application.  Only "on-lattice and off-lattice
applications"_app_style.html support dumps since they are spatial in
nature.  More that one dump command and file can be used during a
simulation by giving each a unique dump-ID.  Note that if written in
appropriate format, a snapshot from a dump file can easily be
converted into a data file suitable for input via the
"read_sites"_read_sites.html command to restart a simulation.

IMPORTANT NOTE: When running in parallel, unless the "dump_modify
sort"_dump_modify.html option is invoked, the lines of per-site
information written to dump files will be in an indeterminate order,
i.e. not ordered by site ID.  The order will be the same in every
snapshot.

The "dump_modify"_dump_modify command can be used to alter the times
at which snapshots are written out as well as defined a subset of
sites to write out.

The text-based dump file is in the format of a "LAMMPS dump
file"_lammps which can thus be read-in by the "Pizza.py
toolkit"_pizza, converted to other formats, or used for visualization.

:line

Each snapshot in the dump file(s) begins with lines like these:

ITEM: TIMESTEP TIME
100   3.23945 :pre

The first field "100" denotes which snapshot it is, numbered as
0,1,2,etc.  Snapshot 0 is thus typically for the state of the system
before the first "run"_run.html command.  The second field "3.23945"
is the simualtion time when the snapshot is generated.

IMPORTANT NOTE: The second simulation time field is an addition to the
standard LAMMPS-style header for each snapshot.

The next lines are like these:

ITEM: NUMBER OF ATOMS
314159 :pre

The word "ATOMS" is LAMMPS syntax, but simply means the number of
sites in a SPPARKS simulation.  The number "314159" will reflect any
reduction in dumped site count due to the
"dump_modify"_dump_modify.html command.

The next lines are like these:

ITEM: BOX BOUNDS
0 50
0 50
0 50 :pre

which denote the simulation box size in x,y,z.  E.g, the last
line is zlo and zhi.

The next line is like this:

ITEM: ATOMS id type x y z 

which begins the per-site information.  One line per site follows.
The trailing "id type x y z" are labels for the per-site columns,
using the requested fields in the dump command.  The word "site" is
converted to "type" so as to be compatible with how LAMMPS-style dump
files are visualized.  The LAMMPS default is to use the "type" value
to color the object (e.g. a sphere) drawn at each site.

:line

Only the specified fields will be included in the dump file for each
site.  each site.  If no fields are listed, then a default set of
fields are output, namely "id site x y z".

these are the possible field values which may be specified.

The {id} is a unique integer ID for each site.

The {site}, {iN}, and {dN} fields specify a per-site value.  {Site} is
the same as {i1}.  {iN} fields are integer values; {dN} fields are
floating-point value. The application defines how many integer and
floating=point values are stored for each site.

The {x}, {y}, {z} values are the coordinates of the site.

The {energy} value is what is computed by the energy() function in the
application.  Likewise for the {propensity} value which can be thought
of as the relative probablity for that site to perform a KMC event.
Note that if the application only performs rejection KMC or Metropolis
MC, then no propensity is defined.

:link(lammps,http://lammps.sandia.gov)
:link(pizza,http://www.cs.sandia.gov/~sjplimp/pizza.html)

:line

The specified filename determines how the dump file(s) is written.
The default is to write one large text file, which is opened when the
dump command is invoked and closed when an "undump"_undump.html
command is used or when SPPARKS exits.

Dump filenames can contain two wild-card characters.  If a "*"
character appears in the filename, then one file per snapshot is
written and the "*" character is replaced with the timestep value.
For example, tmp.dump.* becomes tmp.dump.0, tmp.dump.10000,
tmp.dump.20000, etc.

If a "%" character appears in the filename, then one file is written
for each processor and the "%" character is replaced with the
processor ID from 0 to P-1.  For example, tmp.dump.% becomes
tmp.dump.0, tmp.dump.1, ... tmp.dump.P-1, etc.  This creates smaller
files and can be a fast mode of output on parallel machines that
support parallel I/O for output.

Note that the "*" and "%" characters can be used together to produce a
large number of small dump files!

If the filename ends with ".bin", the dump file (or files, if "*" or
"%" is also used) is written in binary format.  A binary dump file
will be about the same size as a text version, but will typically
write out much faster.  Of course, when post-processing, you will need
to convert it back to text format, using your own code to read the
binary file.  The format of the binary file can be understood by
looking at the src/dump.cpp file.

If the filename ends with ".gz", the dump file (or files, if "*" or
"%" is also used) is written in gzipped format.  A gzipped dump file
will be about 3x smaller than the text version, but will also take
longer to write.

:line

[Restrictions:]

This command can only be used as part of on-lattice or off-lattice
applications.  See the "app_style"_app_style.html command for further
details.

To write gzipped dump files, you must compile SPPARKS with the
-DSPPARKS_GZIP option - see the "Making
SPPARKS"_Section_start.html#2_2 section of the documentation.

[Related commands:]

"dump_one"_dump_one.html, "dump_modify"_dump_modify.html,
"undump"_undump.html, "stats"_stats.html

[Default:] none
